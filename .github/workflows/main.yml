name: EmguCV on Windows 64-bit

on:
  push:
    branches: master
    
jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v1
    
    - name: Fetch tags and master for GitVersion
      run: |
          git fetch --tags
          git branch --create-reflog master origin/master
    
    - name: Install GitVersion
      uses: gittools/actions/setup-gitversion@v0.3
      with:
          versionSpec: '5.1.x'
    
    - name: Use GitVersion
      id: gitversion # step id used as reference for output values
      uses: gittools/actions/execute-gitversion@v0.3
    
    - name: Print Semantic Versions
      run: |
        echo "Major: ${{ steps.gitversion.outputs.major }}"
        echo "Minor: ${{ steps.gitversion.outputs.minor }}"
        echo "Patch: ${{ steps.gitversion.outputs.patch }}"
        echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
        echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
        echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
        echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
        echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
        echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
        echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
        echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
        echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
        echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
        echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
        echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
        echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
        echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
        echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
        echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
        echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
        echo "Sha: ${{ steps.gitversion.outputs.sha }}"
        echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
        echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
        echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
        echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
        echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
        echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
        echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
        echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
        echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"
    
    - name: Clone submodules
      run: git submodule update --init --recursive
    
    - name: Configure project for 64-bit Windows
      run: build_binary_x86.bat 64 nogpu no-intel no-openni nodoc package build
      shell: cmd
      working-directory: platforms/windows
    
    - name: Print folder structure
      run: ls -r > folder_structure.txt
      shell: pwsh
    
    - name: Folder structure artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        name: EmguCV-folder-structure
        path: folder_structure.txt
    
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 2.2.108
    
    - name: Create NuGet package
      run: dotnet pack Solution/Windows.Desktop/Emgu.CV.sln -c Release -p:Version=${{ steps.gitversion.outputs.assemblySemVer }} -p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersionV2 }} -o nupkgs
    
    - name: Upload NuGet package artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        name: EmguCV-drop
        path: nupkgs
    
    - name: Create NuGet symbols package
      run: dotnet pack Solution/Windows.Desktop/Emgu.CV.sln -c Debug -p:Version=${{ steps.gitversion.outputs.assemblySemVer }} -p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersionV2 }} --include-source --include-symbols -o nupkgs-dbg
    
    - name: Upload NuGet symbols package artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        name: EmguCV-dbg-drop
        path: nupkgs-dbg
